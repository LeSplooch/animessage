--[HIDE_CURSOR]--
--[TITLE]-- "Animessage | Tutorial"
--[RESIZE]-- "151" "45"
--[WAIT]-- "0.01"

*** Welcome to Animessage's Tutorial ! ***
--[EMPTY]--

Hi ! I'm Animessage, a command line application to create animated texts (such as ASCII art for example) in the terminal.
This tutorial will walk you through the creation of your first animessage in details. I recommend creating a folder named "tutorial" with 
a file named "tutorial.txt" in that folder, and to launch your default terminal on the side so you can follow along.
This tutorial is an animessage, with the only difference that it's embedded into Animessage instead of being written in a 
separate text file.

--[EMPTY]--
Press C to continue.
--[PRINT_LINE]-- "0"
--[WAIT_FOR_INPUT]-- "C"
--[EMPTY]--

--[MARKER]-- "intro"
--[TITLE]-- "Animessage | Tutorial | Introduction"
--- 0) Introduction / Recommended tools and other notes
--[EMPTY]--

- This tutorial is made with complete beginners in mind, who don't know how a terminal works at all and who have little to no knowledge 
about programming in general. Do not worry though, Animessage is a very simple programming language.
--[EMPTY]--

- You should use one of the default terminals that come with your OS such as cmd.exe / PowerShell on Windows or 
GNOME Terminal / Konsole on Linux for example. This is highly recommended because if somebody else will execute your animessage, there's 
a lot of chances they will use one of the default terminals as well so you'll know in advance how it will look like for them.
You should also use your terminal's default settings if possible.
--[EMPTY]--

- You should use a text/code editor with line numbers on the side because some of Animessage's functions need a line number 
to be entered and being able to see them easily will make both debugging and those functions a lot easier to deal with. 
VIM, Notepad++ and VS Code are three good code editors you can use for creating animessages. However, if you don't want to use such
a code editor, you can just add the -n parameter in your command to show your animessage with line numbers on the side in the
terminal.
--[EMPTY]--

- Animessage is very lightweight and runs well even on very low end machines such as the Raspberry Pi Zero. However, on such 
low end machines, certain functions might be slower such as the --[IMAGE]-- function which converts an image to an ASCII
text. Test your animessage thoroughly before assuming it works as expected.
--[EMPTY]--

- "Animessage" is the application, "animessage" is a code file. Notice the capital at the beginning.

--[EMPTY]--
Press C to continue.
--[PRINT_LINE]-- "0"
--[WAIT_FOR_INPUT]-- "C"
--[EMPTY]--

--[MARKER]-- "writing"
--[TITLE]-- "Animessage | Tutorial | Writing first animessage"
--- 1) Writing your first animessage
--[EMPTY]--

Animessage's language is composed of two major concepts : text and functions. You write your text as you would in a normal text file 
and you put functions around some of your lines of text to interact with them or use different functionalities.

--[EMPTY]--
Example 1A :
------------------------
--[EMPTY]--

text 1
--[ESCAPE]-- --[PRINT_LINE]-- "0"
--[ESCAPE]-- --[WAIT]-- "1"
text 2
--[EMPTY]--
--[ESCAPE]-- --[PRINT_LINE]-- "0"

--[EMPTY]--
------------------------
--[EMPTY]--

Type the above code down in your "tutorial.txt" file and save it. We'll see how to execute your first animessage and what it does 
further in this tutorial.

--[EMPTY]--
Press C to continue.
--[PRINT_LINE]-- "0"
--[WAIT_FOR_INPUT]-- "C"
--[EMPTY]--

--[MARKER]-- "executing"
--[TITLE]-- "Animessage | Tutorial | Executing first animessage"
--- 2) Executing your first animessage
--[EMPTY]--

To execute it, use the command below :
(I highly recommend you actually type both the code down in your file and the commands instead of just copying them as it will 
help you remember how everything works much better.)

--[EMPTY]--
Windows (PowerShell) :
& "C:\path\to\animessage.exe" --file "C:\path\to\tutorial\tutorial.txt"
Linux :
"/path/to/animessage" --file "/path/to/tutorial/tutorial.txt"
--[EMPTY]--

Hurray ! Your first animessage has been displayed in the terminal ! Congratulations !
--[EMPTY]--

You can also type -f instead of --file. Every command argument can be shortened in the same fashion. I will fully write 
them so you have a clearer idea about their purpose.
The file path you pass to the --file command argument is called a "value". You can see the full commands list by typing :
"/path/to/animessage" --help
(or -h instead of --help)
--[EMPTY]--

Remember to save your file after every modification to avoid losing code.
You can close Animessage prematurely by pressing Ctrl and C simultaneously just like any other command line application.

--[EMPTY]--
Press C to continue.
--[PRINT_LINE]-- "0"
--[WAIT_FOR_INPUT]-- "C"
--[EMPTY]--

--[MARKER]-- "debugging"
--[TITLE]-- "Animessage | Tutorial | Debugging"
--- 3) Debugging / Know what your animessage does
--[EMPTY]--

Animessage has a "debug mode" and a "no-exec mode" to help you know what your animessage does, make sure your animessage works as intended, 
or to know what line triggered an error.
The debug mode will fully execute all of your functions as well as showing what every function does.
The no-exec mode is similar to the debug mode but it will not execute most of your functions to make for a much faster debugging session if 
you just want to know which line triggered an error.
Both modes will show the executed lines of code preceded by a line number and a vertical bar to separate them, hence why it's useful to know
precisely which line triggered an error. 
If a line results in an error, it will always be the last line that got executed right before your error.
--[EMPTY]--

The command arguments are the following :
Debug mode : --debug (or -d)
No_exec mod : --no-exec (or -n)

--[EMPTY]--
Example 3A : "/path/to/animessage" --file "/path/to/tutorial/tutorial.txt" --no-exec
Example 3B : "/path/to/animessage" --no-exec --file "/path/to/tutorial/tutorial.txt"
--[EMPTY]--
Both the 3A and the 3B examples achieve the same result.
--[EMPTY]--

These command arguments can be typed anywhere in your command after your animessage's path and have no value.
--[EMPTY]--

In context, you should first run your animessage without any other argument than the --file one, and then type either the "--debug" or the 
"--no-exec" command if you encounter an error.
--[EMPTY]--

Note that you can use these command arguments with the tutorial simply by omitting the "--file" argument and its value.

--[EMPTY]--
Press C to continue.
--[PRINT_LINE]-- "0"
--[WAIT_FOR_INPUT]-- "C"
--[EMPTY]--

--[MARKER]-- "empty lines"
--[TITLE]-- "Animessage | Tutorial | Empty lines"
--- 4) Empty lines
--[EMPTY]--

If you have tried to put empty lines in your "tutorial.txt" file, you maybe have noticed that they haven't been printed in your terminal :
this is intended and it enables formatting your code for it to not feel cluttered. These lines are called "formatting lines".
If you want to insert an a printable empty line, you need to type the function --[EMPTY]-- instead.

--[EMPTY]--
Example 4A :
------------------------
--[EMPTY]--

text 1
--[ESCAPE]-- --[PRINT_LINE]-- "0"
--[ESCAPE]-- --[WAIT]-- "1"
--[ESCAPE]-- --[EMPTY]--
--[EMPTY]--
text 2
--[EMPTY]--
--[ESCAPE]-- --[PRINT_LINE]-- "0"

--[EMPTY]--
------------------------
--[EMPTY]--

In example 4A, we use an --[EMPTY]-- function to insert a printable empty line, followed by a formatting empty line to make the code easier 
to read.

--[EMPTY]--
Press C to continue.
--[PRINT_LINE]-- "0"
--[WAIT_FOR_INPUT]-- "C"
--[EMPTY]--

--[MARKER]-- "functions howto"
--[TITLE]-- "Animessage | Tutorial | Functions"
--- 5) Functions
--[EMPTY]--

We've seen 2 functions in the example 1A : --[PRINT_LINE]-- and --[WAIT]--. These two functions have arguments to which you give values. 
These functions must be written in seperate lines or they won't be detected as functions. Your values must be surrounded by double quotes and
must be separated by whitespaces, and you must not omit values or otherwise you will get an error. Functions don't have default values.
--[EMPTY]--

Example 5A : --[PRINT_LINE]-- "0"
--[EMPTY]--

In this example, we print the previous lines of text with a newline at the end of your text, and a delay of 0 second between each character.
"Printing" is a standard term that means "writing text in the terminal".
--[EMPTY]--

--[EMPTY]--
Press C to continue.
--[PRINT_LINE]-- "0"
--[WAIT_FOR_INPUT]-- "C"
--[EMPTY]--

--[MARKER]-- "functions list"
--[TITLE]-- "Animessage | Tutorial | Functions list"
--- 6) Functions list
--[EMPTY]--

Here is the complete list of functions you can use in your code :
--[EMPTY]--

--[ESCAPE]-- --[PRINT]--           // Prints your previous lines to the console. 1st arg : Delay between each character.
--[ESCAPE]-- --[PRINT_LINE]--      // Prints your previous lines to the console with a newline at the end. 1st arg : Delay between each character.
--[ESCAPE]-- --[GOTO]--            // Goes to a line. 1st arg : line to go to.
--[ESCAPE]-- --[MARKER]--          // Sets a marker to easily go to a specified line of the animessage via the command parameter '-m'. 1st arg : Marker name.
--[ESCAPE]-- --[WAIT]--            // Waits for some duration before continuing. 1st arg : Duration in ms.
--[ESCAPE]-- --[REPLACE]--         // Replaces text at a given line. 1st arg : line. 2nd arg : Replace from. 3rd arg : Replace to.
--[ESCAPE]-- --[DEL_LINE]--        // Deletes a line, therefore offsetting the following lines by -1. 1st arg : line.
--[ESCAPE]-- --[WAIT_FOR_INPUT]--  // Waits for a keyboard key to be typed before continuing. 1st arg : Key.
--[ESCAPE]-- --[OPEN_URL]--        // Opens a given URL if the user allows it. 1st arg : URL.
--[ESCAPE]-- --[AUDIO]--           // Plays a sound in the background. 1st arg : Sound path.
--[ESCAPE]-- --[IMAGE]--           // Transforms an image into ASCII and then prints it to the console. 1st arg : Image path.
--[ESCAPE]-- --[TITLE]--           // Sets the title of the terminal. 1st arg : title.
--[ESCAPE]-- --[CLEAR]--           // Clears the terminal. Often used before print to seperate steps in your animessage.
--[ESCAPE]-- --[RESIZE]--          // Resizes the terminal. 1st arg : columns. 2nd arg : rows.
--[ESCAPE]-- --[MOVE_CURSOR]--     // Moves the cursor to the specified location in columns * rows. 1st arg : columns. 2nd arg : rows.
--[ESCAPE]-- --[HIDE_CURSOR]--     // Hides the cursor.
--[ESCAPE]-- --[SHOW_CURSOR]--     // Shows the cursor.
--[ESCAPE]-- --[EMPTY]--           // Inserts an empty line.
--[ESCAPE]-- --[INCLUDE]--         // Includes another text file at the location. 1st arg : path to the animessage / text file to include.
--[ESCAPE]-- --[ESCAPE]--          // Disables functions in this line, entering the line in the print buffer as it is without functions in it.
--[ESCAPE]-- --[NOTE]--            // Used to write a comment. This function has no effect.
--[ESCAPE]-- --[EXIT]--            // Closes Animessage prematurely.

--[EMPTY]--

Notes :
- Durations and delays are in seconds, and a floating point number can be entered.
- Paths can either be full or relative, but if you encounter an error with a relative path, make sure you can use them by 
enabling the debug mode and then read the first one or two lines.
- The only functions that are fully executed in the no-exec mode are --[GOTO]-- , --[REPLACE]-- , --[DEL_LINE]-- , 
--[ESCAPE]-- --[TITLE]-- , --[INCLUDE]-- , and --[EXIT]-- .
- --[RESIZE]-- can prevent printing to work correctly on some terminals if you print right after resizing. To avoid this,
insert a --[WAIT]-- function with a short delay, such as 0.100 seconds.
- --[WAIT_FOR_INPUT]-- waits for a delay of 250ms before waiting for a key to be pressed to avoid triggering multiple --[WAIT_FOR_INPUT]-- 
too quickly accidentally. It is still possible to hold the expected key down to chain multiple --[WAIT_FOR_INPUT]-- if you put the same key as a value
for multiple --[WAIT_FOR_INPUT]-- functions.

--[EMPTY]--
Press C to continue.
--[PRINT_LINE]-- "0"
--[WAIT_FOR_INPUT]-- "C"
--[EMPTY]--

--[TITLE]-- "Animessage | Tutorial | Congratulations !"

You've reached the end of the tutorial ! Congratulations ! You now know the basics of Animessage and are ready to experiment with your own ideas.
Make a new folder with a new text file of the same name in it and start creating whatever comes to your mind ! :)

--[EMPTY]--
Press E to exit.
--[PRINT_LINE]-- "0"
--[WAIT_FOR_INPUT]-- "E"
--[EMPTY]--