*** Animessage Tutorial ***
--[PRINT_LINE]-- "0"
--[EMPTY]--
This tutorial will teach you how to write your first animessage in details.
Let's get started !
--[PRINT_LINE]-- "0"

--[EMPTY]--
Press C to continue.
--[PRINT_LINE]-- "0"
--[WAIT_FOR_INPUT]-- "C"


--[MARKER]-- "advices"
--[CLEAR]--


--- 0) Recommended tools and advices
--[EMPTY]--
- You should use (but don't need) a responsive terminal with GPU acceleration if possible to minimize prints' overhead. 
Alacritty is an *excellent* terminal for that purpose, but all of the modern terminals are likely to be compatible. However,
you can't expect Animessage to work at its full potential with any other terminal than Alacritty.
--[EMPTY]--
- You should use a text/code editor with line numbers on the side because some of Animessage's functions need a line number 
to be entered and being able to see them easily will make both debugging and those functions a lot easier to deal with. 
VIM, Notepad++ and VS Code are three good code editors you can use for creating animessages. However, if you don't want to use such
a code editor, you can just add the -n parameter in your command to show your animessage with line numbers on the side in the
terminal.
--[EMPTY]--
- Animessage is very lightweight and runs well even on very low end machines such as the Raspberry Pi Zero. However, on such 
low end machines, certain functions might be slower such as the --[ASCII_IMAGE]-- function which converts an image to an ASCII
text. Test your animessage thoroughly before assuming it works as expected.
--[PRINT_LINE]-- "0"

--[EMPTY]--
Press C to continue.
--[PRINT_LINE]-- "0"
--[WAIT_FOR_INPUT]-- "C"


--[CLEAR]--
--[MARKER]-- "print"


--- 1) Text / Printing to the console ---
--[EMPTY]--
This is the most basic function of Animessage : --[PRINT_LINE]-- , to print text to the console. 
Your text won't be printed as Animessage processes it. Instead, it puts lines in memory in what is called the "print buffer".
The print buffer will contain every line that isn't a function until a --[PRINT_LINE]-- function is met, which will print the print buffer's lines
into the console and then clear the print buffer for it to be ready for the next step.
This function takes 1 argument : the delay between each character in seconds. A decimal number can be entered for fine tuning. "0" means no delay at all.

--[EMPTY]--
Example 1A :
------------------------
--[EMPTY]--

text 1
text 2
--[EMPTY]--
--[ESCAPE]-- --[PRINT_LINE]-- "0"

--[EMPTY]--
------------------------

--[EMPTY]--
This will put 'text 1' and 'text 2' in memory sequentially, and then print them.
Every line of text will be put in memory until a --[PRINT_LINE]-- is met to print your text.
--[EMPTY]--
Note that your functions don't need to be at the beginning of a line to be executed so feel free to put a few spaces before your functions 
to make them easier to read or find if your animessage feels cluttered.

--[PRINT_LINE]-- "0"

--[EMPTY]--
Press C to continue.
--[PRINT_LINE]-- "0"
--[WAIT_FOR_INPUT]-- "C"



--[CLEAR]--
--[MARKER]-- "empty"


--- 2) Empty lines ---
--[EMPTY]--
There is 2 types of empty lines : formatting empty lines to make your code easier to read and rendered empty lines that will be printed in your animessage.
In the example 1A we've used a formatting empty line to make our text file easier to read. This empty line has been ignored by Animessage.
If we wanted to show an empty line in our animessage, we would've used --[EMPTY]-- as follows :

--[EMPTY]--
Example 2A :
------------------------
--[EMPTY]--

text 1
--[ESCAPE]-- --[EMPTY]-- 
text 2
--[EMPTY]--
--[ESCAPE]-- --[PRINT_LINE]-- "0"

--[EMPTY]--
------------------------

--[PRINT_LINE]-- "0"

--[EMPTY]--
Press C to continue.
--[PRINT_LINE]-- "0"
--[WAIT_FOR_INPUT]-- "C"


--[CLEAR]--
--[MARKER]-- "clear"


--- 3) Clearing the terminal ---
--[EMPTY]--
Sometimes you'll want to clear your terminal before printing new lines to create steps in your animessage.
In this case, the function you'll need is --[CLEAR]-- . It's usually written right before --[PRINT_LINE]-- but you can find other uses for it.

--[EMPTY]--
Example 3A :
----------------------------
--[EMPTY]--

line 1
--[ESCAPE]-- --[PRINT_LINE]-- "0"
line 2
--[ESCAPE]-- --[CLEAR]--
--[ESCAPE]-- --[PRINT_LINE]-- "0"

--[EMPTY]--
----------------------------

--[EMPTY]--
This code will print "line 1", clear the terminal, and then print "line 2".

--[PRINT_LINE]-- "0"

--[EMPTY]--
Press C to continue.
--[PRINT_LINE]-- "0"
--[WAIT_FOR_INPUT]-- "C"


--[CLEAR]--
--[MARKER]-- "wait"


--- 4) Waiting ---
--[EMPTY]--
It is possible to wait for a moment before continuing to process the rest of your animessage thanks to the --[WAIT]-- function.
The --[WAIT]-- function has 1 argument : the number of seconds you want to wait for before Animessage processes the rest of
your code.

--[EMPTY]--
Example 4A :
----------------------------
--[EMPTY]--

Example 4a :
--[EMPTY]--
text 1
--[ESCAPE]-- --[PRINT_LINE]--
text 2
--[ESCAPE]-- --[WAIT]-- "2"
--[ESCAPE]-- --[PRINT_LINE]--

--[EMPTY]--
----------------------------

--[EMPTY]--
This will print "text 1" and then wait for 2 seconds before printing "text 2".
Animessage will wait as soon as the --[WAIT]-- function is met.

--[PRINT_LINE]-- "0"

--[EMPTY]--
Press C to continue.
--[PRINT_LINE]-- "0"
--[WAIT_FOR_INPUT]-- "C"


--[CLEAR]--
--[MARKER]-- "wait input"


--- 5) Waiting for an input ---
--[EMPTY]--
You can wait for a key to be pressed to trigger your following code. Among other uses, this is useful if you want to make sure all of the current lines are read by the user before continuing.
This function is --[WAIT_FOR_INPUT]-- . It needs an argument to specify the key that will trigger the rest of your code.

--[EMPTY]--
Example 5A :
-----------------------------------
--[EMPTY]--

text 1
--[EMPTY]--
--[ESCAPE]-- --[PRINT_LINE]--
--[ESCAPE]-- --[WAIT_FOR_INPUT]-- "C"
--[EMPTY]--
text 2
--[EMPTY]--
--[ESCAPE]-- --[PRINT_LINE]--

--[EMPTY]--
-----------------------------------

--[EMPTY]--
This code will print "text 1", wait for the C key to be pressed, and only then print "text 2".

--[PRINT_LINE]-- "0"

--[EMPTY]--
Press C to continue.
--[PRINT_LINE]-- "0"
--[WAIT_FOR_INPUT]-- "C"


--[CLEAR]--
--[MARKER]-- "include"


--- 6) Including another animessage ---
--[EMPTY]--
You can include text from another animessage using the --[INCLUDE]-- function followed by the file path. Your file name must not contain spaces, so you must use underscores 
instead of spaces in your file name.
Paths are special in Animessage : you can specify a relative path to your file instead of the full path. This is valid for other functions that accept paths as well.

--[EMPTY]--
Example 6A :
Context : we have another animessage in the same folder as our animessage file called 
"simple_question.txt" contaning the text "How are you ?".
----------------------------------------------
--[EMPTY]--

Hello
--[ESCAPE]-- --[INCLUDE]-- "simple_question.txt"
--[ESCAPE]-- --[PRINT_LINE]-- "0"
text 1
--[ESCAPE]-- --[PRINT_LINE]-- "0"

--[EMPTY]--
----------------------------------------------


--[EMPTY]--
This code will print "Hello" and "How are you ?" over 2 seperate lines, and then "text 1". Note that you need to use --[PRINT_LINE]-- to print the newly included lines as they
have only been inserted in the print buffer.

--[PRINT_LINE]-- "0"

--[EMPTY]--
Press C to continue.
--[PRINT_LINE]-- "0"
--[WAIT_FOR_INPUT]-- "C"


--[CLEAR]--

